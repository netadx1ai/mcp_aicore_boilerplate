{
  "name": "@netadx1ai/mcp-aicore-boilerplate",
  "version": "1.0.0",
  "description": "NetADX AI-CORE - Production-ready MCP API boilerplate built on official TypeScript SDK v1.0.0",
  "keywords": [
    "mcp",
    "model-context-protocol",
    "netadx",
    "ai-core",
    "ai",
    "llm",
    "agents",
    "typescript",
    "server",
    "boilerplate"
  ],
  "author": "NetADX AI-CORE Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/netadx1ai/netadx-workspace.git",
    "directory": "development/mcp_aicore_boilerplate"
  },
  "homepage": "https://github.com/netadx1ai/netadx-workspace/tree/main/development/mcp_aicore_boilerplate",
  "bugs": {
    "url": "https://github.com/netadx1ai/netadx-workspace/issues"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "packageManager": "npm@10.0.0",
  "workspaces": [
    "servers/*",
    "templates/*",
    "examples/*"
  ],
  "scripts": {
    "build": "npm run build --workspaces",
    "build:production": "NODE_ENV=production npm run build",
    "test": "npm run test --workspaces",
    "test:coverage": "jest --coverage --passWithNoTests",
    "test:watch": "jest --watch --passWithNoTests",
    "lint": "eslint . --ext .ts,.js,.json --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit",
    "quality-check": "npm run format:check && npm run lint && npm run type-check && npm run test",
    "dev": "npm run dev",
    "start": "node dist/index.js",
    "example:http": "npm run build && node dist/examples/http-server/basic-http-server.js",
    "example:http:dev": "tsx examples/http-server/basic-http-server.ts",
    "s3-upload:server": "npm run build && node dist/examples/s3-upload-server.js",
    "s3-upload:server:dev": "tsx examples/s3-upload-server.ts",
    "s3-upload:test": "jest tests/s3-upload.test.ts",
    "preset-manager:example": "tsx examples/preset-manager-example.ts",
    "preset-manager:test": "jest tests/preset-manager.test.ts",
    "preset-manager:server": "npm run build && node dist/examples/preset-manager-server.js",
    "preset-manager:server:dev": "tsx examples/preset-manager-server.ts",
    "preset-manager:api-test": "tsx scripts/test-preset-api.ts",
    "image-generator:test": "tsx examples/test-image-generator.ts",
    "image-generator:test:unit": "tsx examples/test-image-generator.ts unit",
    "image-generator:demo": "tsx examples/test-image-generator.ts demo",
    "image-generator:test:s3": "tsx examples/test-s3-integration.ts",
    "s3-upload:test:ai-images": "tsx examples/test-ai-generated-images.ts",
    "s3-upload:test:ai-images:cleanup": "tsx examples/test-ai-generated-images.ts --cleanup",
    "mongo:verify": "tsx scripts/verify-mongodb.ts",
    "mongo:test-connection": "node scripts/test-mongo-connection.cjs",
    "mongo:add-samples": "tsx scripts/add-sample-data.ts",
    "mongo:show-data": "tsx scripts/show-collection-data.ts",
    "setup:env": "chmod +x setup-env.sh && ./setup-env.sh",
    "setup:dev": "./setup-env.sh --dev",
    "setup:prod": "./setup-env.sh --prod",
    "setup:high-ccu": "./setup-env.sh --ccu",
    "env:validate": "./setup-env.sh --validate",
    "s3-upload-server:dev": "cd servers/s3-upload-server && npm run dev",
    "s3-upload-server:build": "cd servers/s3-upload-server && npm run build",
    "s3-upload-server:start": "cd servers/s3-upload-server && npm run start",
    "s3-upload-server:test": "cd servers/s3-upload-server && npm run test",
    "preset-server:dev": "cd servers/preset-server && npm run dev",
    "preset-server:build": "cd servers/preset-server && npm run build",
    "preset-server:start": "cd servers/preset-server && npm run start",
    "preset-server:test": "cd servers/preset-server && npm run test",
    "full-api-server:dev": "cd servers/full-api-server && npm run dev",
    "full-api-server:build": "cd servers/full-api-server && npm run build",
    "full-api-server:start": "cd servers/full-api-server && npm run start",
    "full-api-server:test": "cd servers/full-api-server && npm run test",
    "full-api-server:production": "cd servers/full-api-server && npm run start:production",
    "full-api-server:debug": "cd servers/full-api-server && npm run dev:debug",
    "demo:full": "npm run mongo:verify && npm run mongo:add-samples && npm run s3-upload:server:dev",
    "clean": "rimraf dist coverage .nyc_output && npm run clean --workspaces",
    "prepare": "if [ -d .git ]; then husky install; fi",
    "precommit": "lint-staged",
    "release": "standard-version",
    "docs:generate": "typedoc",
    "docs:serve": "http-server docs -p 8080",
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "deps:update": "npm-check-updates -u && npm install",
    "deps:check": "npm-check-updates",
    "docker:build": "docker build -t mcp-boilerplate-ts .",
    "docker:run": "docker run -p 8000-8006:8000-8006 mcp-boilerplate-ts",
    "k8s:deploy": "./deployment/kubernetes/deploy.sh --apply-all",
    "monitoring:deploy": "./deployment/monitoring/deploy.sh --monitoring"
  },
  "devDependencies": {
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/jest": "^29.5.5",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20.19.24",
    "@types/node-fetch": "^2.6.11",
    "@types/supertest": "^6.0.3",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "eslint": "^8.49.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jest": "^27.4.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.0.0",
    "http-server": "^14.1.1",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "lint-staged": "^14.0.1",
    "npm-check-updates": "^16.14.6",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.1",
    "standard-version": "^9.5.0",
    "supertest": "^7.1.4",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "tsx": "^4.20.5",
    "typedoc": "^0.25.1",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "@google/genai": "^1.27.0",
    "@modelcontextprotocol/sdk": "^1.18.1",
    "@types/multer": "^2.0.0",
    "@types/uuid": "^10.0.0",
    "aws-sdk": "^2.1692.0",
    "axios": "^1.12.2",
    "commander": "^11.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^5.1.0",
    "express-rate-limit": "^8.1.0",
    "form-data": "^4.0.4",
    "helmet": "^8.1.0",
    "jsonwebtoken": "^9.0.2",
    "mongodb": "^6.20.0",
    "multer": "^2.0.2",
    "node-fetch": "^3.3.2",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "uuid": "^13.0.0",
    "winston": "^3.10.0",
    "zod": "^3.22.2"
  },
  "lint-staged": {
    "*.{ts,js}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "volta": {
    "node": "20.6.0",
    "npm": "10.0.0"
  },
  "type": "module",
  "main": "dist/index.js",
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  }
}
